import json
import sys
import lzma
import logging

# processes the stats.shadow.json files produced by shadow's
# tools/parse-shadow.py script; but also need the
# browser_proxy_mode_spec.txt file to know which web client is tor and
# which is tproxy-via-tor

starting_at = 1800

print('''


NOTE!!!!!! count only starting at/after {starting_at} seconds, when all
the nodes in the network are up and tranferring stuff



'''.format(starting_at=starting_at))

def sizeof_fmt(num, suffix='B'):
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.1f %s%s" % (num, unit, suffix)
        num /= 1024.0
        pass
    return "%.1f %s%s" % (num, 'Yi', suffix)


assert len(sys.argv) == 3

# the stats generated by shadow/tools/parse-shadow.py script
stats_shadow_json_fpath = sys.argv[1]

browser_proxy_mode_spec_fpath = sys.argv[2]

openfunc = lzma.open if stats_shadow_json_fpath.endswith('.xz') else open

with openfunc(stats_shadow_json_fpath, 'rt') as fp:
    obj = json.load(fp)
    pass

# map from webclient name to proxy mode
webclient_proxy_modes = {}

from collections import defaultdict
# number of clients for a proxy mode
proxy_mode_client_count = defaultdict(int)

with open(browser_proxy_mode_spec_fpath) as fp:
    for line in fp:
        if not line or line[0] == '#':
            continue
        parts = line.split('=')
        assert len(parts) == 2
        nodename = parts[0].strip()
        proxymode = parts[1].strip()

        assert nodename not in webclient_proxy_modes
        webclient_proxy_modes[nodename] = proxymode
        assert proxymode in ('none', 'tor', 'tproxy', 'tproxy-via-tor')
        proxy_mode_client_count[proxymode] += 1
        pass
    pass

nodes = obj['nodes']


from collections import defaultdict

# compare web vs bulk
node_group_stats = {
    'bulk': {'recv': 0,
             'send': 0,
             },
    'web': {'recv': 0,
            'send': 0,
            },
    }

web_proxy_mode_group_stats = {
    'tor': {'recv': {'num_intervals': 0, 'byte_count': 0},
            'send': {'num_intervals': 0, 'byte_count': 0},
            },
    'tproxy-via-tor': {'recv': {'num_intervals': 0, 'byte_count': 0},
                       'send': {'num_intervals': 0, 'byte_count': 0},
                       },
    }
                
import pdb

for nodename, nodestats in nodes.items():

    # nodename is like "webclient92~11.0.1.183"
    nodename = nodename.split('~')[0]
    group_stats = None

    proxy_mode = None
    if nodename.startswith('bulkclient'):
        group_stats = node_group_stats['bulk']
        pass
    elif nodename.startswith('webclient'):
        assert nodename in webclient_proxy_modes, nodename
        group_stats = node_group_stats['web']
        proxy_mode = webclient_proxy_modes[nodename]
        pass

    if group_stats:
        recv_stats = nodestats['recv']
        send_stats = nodestats['send']

        # this is a mapping from start of interval (seconds) to total
        # bytes received in the interval
        total_recv_stats = recv_stats['bytes_total']
        total_send_stats = send_stats['bytes_total']

        recv_byte_counts = [byte_count for time_str, byte_count in list(total_recv_stats.items()) if int(time_str) >= starting_at]
        send_byte_counts = [byte_count for time_str, byte_count in list(total_send_stats.items()) if int(time_str) >= starting_at]

        group_stats['recv'] += sum(recv_byte_counts)

        if proxy_mode:
            web_proxy_mode_group_stats[proxy_mode]['recv']['num_intervals'] += len(recv_byte_counts)
            web_proxy_mode_group_stats[proxy_mode]['recv']['byte_count'] += sum(recv_byte_counts)

            web_proxy_mode_group_stats[proxy_mode]['send']['num_intervals'] += len(send_byte_counts)
            web_proxy_mode_group_stats[proxy_mode]['send']['byte_count'] += sum(send_byte_counts)
            pass
        pass

    pass

webrecv = node_group_stats['web']['recv']
bulkrecv = node_group_stats['bulk']['recv']
totalrecv = webrecv + bulkrecv


print('''
compare web vs bulk

total web+bulk recv: {total}
total web recv:      {webrecv} -> {webpercent:.2f}%
total bulk recv:     {bulkrecv} -> {bulkpercent:.2f}%
'''.format(
    webrecv=sizeof_fmt(webrecv),
    webpercent=float(webrecv) / totalrecv * 100,
    bulkrecv=sizeof_fmt(bulkrecv),
    bulkpercent=float(bulkrecv) / totalrecv * 100,
    total=sizeof_fmt(totalrecv),
    ))

print('''
compare tproxy-via-tor vs tor
''')
for proxy_mode, group_stats in sorted(web_proxy_mode_group_stats.items()):
    if group_stats['recv']['num_intervals']:
        recv_total = group_stats['recv']['byte_count']
        send_total = group_stats['send']['byte_count']
        recv_rate = float(recv_total) / group_stats['recv']['num_intervals']
        send_rate = float(group_stats['send']['byte_count']) / group_stats['send']['num_intervals']
        pass
    else:
        recv_total = 0
        send_total = 0
        recv_rate = 'n/a '
        send_rate = 'n/a '
        pass

    num_clients=proxy_mode_client_count[proxy_mode]

    print('''{mode}: num clients: {num_clients}
    recv total:     {recv_total}   per client: {recv_per_client}
    recv bandwidth: {recv_rate}/s
    send total:     {send_total}
    send bandwidth: {send_rate}/s
'''.format(mode=proxy_mode, num_clients=num_clients,
           recv_total=sizeof_fmt(recv_total),
           recv_rate=sizeof_fmt(recv_rate) if num_clients else 'n/a',
           send_total=sizeof_fmt(send_total),
           send_rate=sizeof_fmt(send_rate) if num_clients else 'n/a',

           recv_per_client=sizeof_fmt(float(recv_total) / num_clients) if num_clients else 'n/a',
           send_per_client=sizeof_fmt(float(send_total) / num_clients) if num_clients else 'n/a',

           ))
    pass

